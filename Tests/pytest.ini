[tool:pytest]
# Pytest configuration file

# Markers
markers =
    unit: marks tests as unit tests
    integration: marks tests as integration tests
    performance: marks tests as performance tests
    slow: marks tests as slow running tests
    api: API endpoint tests
    model: Model-related tests
    data: Data processing tests
    feature_engineering: Feature engineering tests
    backend: Backend component tests
    frontend: Frontend component tests
    desktop: Desktop application tests
    gui: GUI-related tests
    process: Process management tests
    network: Network-related tests
    mock_heavy: Tests with extensive mocking

# Test discovery
testpaths = Tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 6.0

# Add options
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --cov=.
    --cov-report=html:Tests/coverage_html
    --cov-report=term-missing
    --cov-report=xml:Tests/coverage.xml
    --junit-xml=Tests/junit.xml
    --durations=10

# Markers
markers =
    unit: Unit tests
    integration: Integration tests
    performance: Performance tests
    slow: Slow running tests
    api: API endpoint tests
    model: Model-related tests
    data: Data processing tests
    feature_engineering: Feature engineering tests
    backend: Backend component tests
    frontend: Frontend component tests
    desktop: Desktop application tests
    gui: GUI-related tests
    process: Process management tests
    network: Network-related tests
    mock_heavy: Tests with extensive mocking

# Filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Coverage settings
[coverage:run]
source = .
omit = 
    Tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    */migrations/*
    */node_modules/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
